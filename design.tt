[% title = "git db design" %]

git db is a layered design, consisting of:

<table>
  <thead>
    <tr>
      <th>Layer</th>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>7</td>
      <td>
        <a href="[% link('design/distribution.tt') %]">
	  Distribution
        </a>
      </td>
      <td>How change information is passed from node to node</td>
    </tr>
    <tr>
      <td>6</td>
      <td>
        <a href="[% link('design/tx.tt') %]">
	  Transactions
        </a>
      </td>
      <td>How bundled changes are prepared, and how ACID or BASE
        semantics are achieved.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>
        <a href="[% link('design/meta.tt') %]">
	  MetaFormat
        </a>
      </td>
      <td>metamodel which can express basic schemas, including itself,
        which can be stored in the filesystem structure,</td>
    </tr>
    <tr>
      <td>4</td>
      <td>
        <a href="[% link('design/treeformat.tt') %]">
	  TreeFormat
        </a>
      </td>
      <td>a filesystem structure for arranging similarly typed
        pretty-printed packaged rows in git trees,</td>
    </tr>
    <tr>
      <td>3</td>
      <td>
        <a href="[% link('design/filenames.tt') %]">
	  Filename
        </a>
      </td>
      <td>a pretty-printing row packaging standard, for filename-izing
        a series of columns, to refer to binary encoded rows</td>
    </tr>
    <tr>
      <td>2</td>
      <td>
        <a href="[% link('design/columnformat.tt') %]">
	  ColumnFormat
        </a>
      </td>
      <td>a binary value packaging standard, to combine encoded values
        into binary sequences representing lists of columns</td>
    </tr>
    <tr>
      <td>1</td>
      <td>
        <a href="[% link('design/encoding.tt') %]">
	  Encoding
        </a>
      </td>
      <td>a set of binary encoding formats for some basic types like
        Integers, Floats, Strings, etc,
      </td>
    </tr>
  </tbody>
</table>

The system is designed to support a wide variety of use cases, some of
which will not use all of the layers.  See the <a href="[%
link('scalability.tt') %]">scalability page</a> for more information.

Hopefully the basic layers will be simple enough to be a useful
back-end for SQLite or embedded uses.  A a traditional multi-user
RDBMS might want to use layers 1 through 5 as a backing store; a
distributed computing system might use all of them.
