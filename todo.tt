[% title = "deferred features" %]

The following features are defined as being on the roadmap, but not
close enough to worry about exactly where yet.

<h2>PARTITIONING, SHARDING AND FAN-OUT</h2>

Being able to specify the exact fan-out of the schema in the store may
be useful; it can be used as a part of a sharding implementation as
well.

That is, say that the primary key of a row is:

<pre>(urn:ietf:gitdb:schema, 0.1, 4, 2)</pre>

This corresponds to the filename;

<pre>urn:ietf:gitdb:schema,0.1,4,2</pre>

The fan-out might be specified as the first two keys; so the expected
filename in the store is then:

<pre>urn:ietf:gitdb:schema,0.1/4,2</pre>

This can be useful for partitioning/sharding, where you might have
your primary key as some function of the lookup ID, then split by the
first 3 nybbles to achieve 1024 shards;

<pre>badabadabadabadabaa001</pre>

becomes:

<pre>bad/abadabadabadabaa001</pre>

As each directory has a single checksum which represents the entirety
of its contents, nodes need not hold a copy of the other shards; just
the current checksum of the contents.

<h2>FUNCTIONS</h2>

This is probably the first next big thing to describe.  A function is
described by a few things;

<ul>
<li>Its name, which within a schema can be reasonably happy to be unique
<li>The number and type of input arguments and return values.
<li>The language which the function is defined in.
<li>The actual definition of the function, in said language.
</ul>

This is a bit of a can of worms, so a prototype which avoids it is
probably better.

<h2>CHECK CONSTRAINTS</h2>

Check constraints are a basic part of data modelling and allow sanity
checks to be applied to the data as it goes in.  These do however
require a mechanism for expressing functions, so until that is solved,
check constraints will be out of scope.

<h2>TRIGGERS</h2>

Triggers are a way of making database stuff happen on certain events;
such as inserting, deleting or updating a row.  This can be used to
enforce very domain-specific rules.

<h2>INDEX PREDICATES</h2>

Sometimes you don't want an index to apply to all rows.  There will be
an implied predicate of all indexes; they will only apply if the
columns they index are not null.  This itself is useful, but being
able to only index a select portion of columns is also very handy.

<h2>FUNCTIONAL INDEXES</h2>

Normally values are inserted into indexes as is, but this allows for
some transformation of columns to the value which is considered
unique.  Useful for things like case insensitive (but case preserving)
constraints.

<h2>ARRAY TYPES</h2>

Array types allow for more compact class definitions, and for example
in the above definitions would allow for some slave tables to be
removed entirely (<tt>meta.key:attr</tt> and <tt>meta.class:super</tt>)

<h2>SEQUENCES</h2>

Not really useful until they can be used, as with functions.  They are
also not a very good fit to the distributed approach in many of the
distributed computing profiles; GUIDs (or just random strings) are
often a better idea.

That being said, if sequences are used as default values and
constraints, then the work to merge when two writers use the same
sequence number is defined and limited to changing the values in the
new rows which were written or the linked rows which were updated.

This is likely to be an acceptable penalty for all but the busiest
OLTP systems.

<h2>VIEWS</h2>

Describing a view requires a good definition of query syntax, joins,
expressions, etc.  After the abstract query syntax tree is completed,
this will be revisited.  Materialized views should also come "for
free" in this design without having to manually write triggers

