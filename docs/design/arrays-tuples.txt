================================================
Is NoSQL *really* more flexible than PostgreSQL?
================================================

This rant was split off from `the ColumnFormats page
<./columnformat.html#array-nested>`

Many of the criticisms levelled at traditional,
simply-typed-column-oriented database programming is that "joins are
expensive".  Actually, a lot of the time joins are necessary simply to
put data together which is almost never accessed independently.  For
instance, say you are recording the distances for a jogger's run.  You
receive every minute how far the jogger ran.  Yet, you want to answer
queries such as, return everyone who got further than 1 mile by the
7th minute.  A traditional approach would give you two tables: one for
the record of the run, with some kind of serial identifier, and then a
link to another table which foreign keys back to that serial
identifier, also has a "number of minutes" field which is part of its
primary key along with the foreign key, and finally a distance column.
Querying that kind of thing is insane and any question involving the
per-minute data can result in difficult to optimize joins.  Postgres'
ARRAY type models this naturally, and eliminates these joins.  There's
a similar justification to be made for nested types (which, again,
Postgres supports).

In fact, pretty much the whole NoSQL craze could be seen to be a
manifestation of this core deficiency from every database which isn't
Postgres, or some other crazy hybrid object/relational store.

But the flipside of NoSQL (and don't think that the first people to
invent databases didn't think of doing things this way, it's
effectively a horrid throwback to the 60's) is that type safety is
generally lost.  People engineer around this of course, but wouldn't
it be better to make the type safety part of the database itself?

In any case, this standard squarely falls into the "crazy hybrid
object/relational store" software category.  Whether it will be as
useful for rapid prototyping as completely lax NoSQL storage systems
will remain to be seen.

