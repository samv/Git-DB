restindex
    crumb: Design
    page-description:
       The design of gitdb
    /description
/restindex

==============
git db design
==============

git db is a layered design, consisting of:

.. list-table::
   :header-rows: 1
   :widths: 10 20 40

   * - Layer
     - Name
     - Description

   * - 7
     - Distribution_
     - How change information is passed from node to node

   * - 6
     - Transactions_
     - How bundled changes are prepared, and how ACID or BASE
       semantics are achieved.

   * - 5
     - MetaFormat_
     - metamodel which can express basic schemas, including itself,
       which can be stored in the filesystem structure,

   * - 4
     - TreeFormat_
     - a filesystem structure for arranging similarly typed
       pretty-printed packaged rows in git trees,

   * - 3
     - Filenames_
     - a pretty-printing row packaging standard, for filename-izing
       a series of columns, to refer to binary encoded rows

   * - 2
     - ColumnFormat_
     - a binary value packaging standard, to combine encoded values
       into binary sequences representing lists of columns

   * - 1
     - Encoding_
     - a set of binary encoding formats for some basic types like
       Integers, Floats, Strings, etc,

The system is designed to support a wide variety of use cases, some of
which will not use all of the layers.  See the `scalability page`_ for
more information.

Hopefully the basic layers will be simple enough to be a useful
back-end for SQLite or embedded uses.  A a traditional multi-user
RDBMS might want to use layers 1 through 5 as a backing store; a
distributed computing system might use all of them.

.. _Distribution:
   ./distribution.html

.. _Encoding:
   ./encoding.html

.. _ColumnFormat:
   ./columnformat.html

.. _Filenames:
   ./filenames.html

.. _MetaFormat:
   ./meta.html

.. _Transactions:
   ./tx.html

.. _TreeFormat:
   ./treeformat.html

.. _scalability page:
   ../scalability.html

